{"ast":null,"code":"// To make firebase running (the app contain every utilities necessary for firebase to run)\n// to get in we need initializeApp : create an App instance for me based on some type of config\n// This config is an object that allow us to attached this firebase instance to the instance we have online\n// It permit to say to firebase that we want to refer the instance created inside firebase console online\n// so we clicked on <> in firebase website and register our web app: FoodCare-web-app\n// CRUD can happen using this firebase app instance that is a librairy with multiple functions and so on\nimport { initializeApp } from 'firebase/app';\n\n// We also need access to the micro-librairy for authentication tools, getAuth is a auth instance\nimport { getAuth, signInWithPopup, GoogleAuthProvider, signInWithRedirect } from 'firebase/auth';\nimport { getFirestore, doc, getDoc, setDoc, collection, writeBatch, query, getDocs } from 'firebase/firestore';\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDXrZHYL2nnHazv-m297sxCPxOIIh4-Kwc\",\n  authDomain: \"foodcare-f50db.firebaseapp.com\",\n  projectId: \"foodcare-f50db\",\n  storageBucket: \"foodcare-f50db.appspot.com\",\n  messagingSenderId: \"465752676826\",\n  appId: \"1:465752676826:web:cc78e5e4d953c04db688e3\"\n};\n\n// Initialize Firebase\nconst firebaseApp = initializeApp(firebaseConfig);\n\n// We need a provider to give us  back the provider instance GoogleAuthProvider\n\nconst provider = new GoogleAuthProvider(); //  GoogleAuth... this is a class \n\n// FROM GoogleAuthProvider\n// The method here take an object as parameter and we choose options:\n// prompt: \"select_account\" mean that every time user interact with our Auth Provider, we force them to select an account\nprovider.setCustomParameters({\n  prompt: \"select_account\"\n});\n\n// from firebase/auth:\nexport const auth = getAuth();\nexport const signInWithGooglePopup = () => signInWithPopup(auth, provider);\nexport const signInWithGoogleRedirect = () => signInWithRedirect(auth, provider);\n// Now we need to set things in firebase (in sign-in method in Authentication) => provide hability to sign with Google\n\nexport const db = getFirestore();\nexport const addCollectionAndDocuments = async (collectionKey, objectstoAdd) => {\n  const collectionRef = collection(db, collectionKey);\n  const batch = writeBatch(db);\n  objectstoAdd.forEach(object => {\n    const docRef = doc(collectionRef, object.title.toLowerCase());\n    batch.set(docRef, object);\n  });\n  await batch.commit();\n  console.log('batch is sent');\n};\nexport const getCategoriesAndDocuments = async () => {\n  const collectionRef = collection(db, 'categories');\n  const q = query(collectionRef);\n  const querySnapshot = await getDocs(q);\n  const categoryMap = querySnapshot.docs.reduce((accumulator, docSnapshot) => {\n    const {\n      title,\n      items\n    } = docSnapshot.data();\n    accumulator[title.toLowerCase()] = items;\n    return accumulator;\n  }, {});\n  return categoryMap;\n};\nexport const createUserDocumentFromAuth = async userAuth => {\n  const userDocRef = doc(db, 'users', userAuth.uid);\n  const userSnapshot = await getDoc(userDocRef);\n\n  // I want to check if this data exists\n  // if it exist I just return the userDocRef so i do nothing else\n  // if not : I create / set the document with the data from userAuth in my collection\n  if (!userSnapshot.exists()) {\n    // fields inside userAuth object in the browser console: we extract through destructuration these two fields.\n    const {\n      displayName,\n      email\n    } = userAuth;\n    // to know when the user is sign in : \n    const createdAt = new Date();\n    // Asynchronously if there is no error we set the document we get before and pass to it the values in 2nd argument\n    try {\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        createdAt\n      });\n    } catch (error) {\n      console.log('error creating the user', error.message);\n    }\n  }\n  return userDocRef;\n};","map":{"version":3,"names":["initializeApp","getAuth","signInWithPopup","GoogleAuthProvider","signInWithRedirect","getFirestore","doc","getDoc","setDoc","collection","writeBatch","query","getDocs","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseApp","provider","setCustomParameters","prompt","auth","signInWithGooglePopup","signInWithGoogleRedirect","db","addCollectionAndDocuments","collectionKey","objectstoAdd","collectionRef","batch","forEach","object","docRef","title","toLowerCase","set","commit","console","log","getCategoriesAndDocuments","q","querySnapshot","categoryMap","docs","reduce","accumulator","docSnapshot","items","data","createUserDocumentFromAuth","userAuth","userDocRef","uid","userSnapshot","exists","displayName","email","createdAt","Date","error","message"],"sources":["C:/Users/amaur/Desktop/myWeb/Foodcare/client/src/utils/firebase/firebase.utils.js"],"sourcesContent":["// To make firebase running (the app contain every utilities necessary for firebase to run)\r\n// to get in we need initializeApp : create an App instance for me based on some type of config\r\n// This config is an object that allow us to attached this firebase instance to the instance we have online\r\n// It permit to say to firebase that we want to refer the instance created inside firebase console online\r\n// so we clicked on <> in firebase website and register our web app: FoodCare-web-app\r\n// CRUD can happen using this firebase app instance that is a librairy with multiple functions and so on\r\nimport { initializeApp } from 'firebase/app'\r\n\r\n// We also need access to the micro-librairy for authentication tools, getAuth is a auth instance\r\nimport {\r\n    getAuth,\r\n    signInWithPopup, GoogleAuthProvider, signInWithRedirect\r\n} from 'firebase/auth'\r\n\r\nimport { getFirestore, doc, getDoc, setDoc, collection, writeBatch, query, getDocs} from 'firebase/firestore';\r\n\r\n// Your web app's Firebase configuration\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyDXrZHYL2nnHazv-m297sxCPxOIIh4-Kwc\",\r\n    authDomain: \"foodcare-f50db.firebaseapp.com\",\r\n    projectId: \"foodcare-f50db\",\r\n    storageBucket: \"foodcare-f50db.appspot.com\",\r\n    messagingSenderId: \"465752676826\",\r\n    appId: \"1:465752676826:web:cc78e5e4d953c04db688e3\"\r\n};\r\n\r\n// Initialize Firebase\r\nconst firebaseApp = initializeApp(firebaseConfig);\r\n\r\n// We need a provider to give us  back the provider instance GoogleAuthProvider\r\n\r\nconst provider = new GoogleAuthProvider(); //  GoogleAuth... this is a class \r\n\r\n// FROM GoogleAuthProvider\r\n// The method here take an object as parameter and we choose options:\r\n// prompt: \"select_account\" mean that every time user interact with our Auth Provider, we force them to select an account\r\nprovider.setCustomParameters({\r\n    prompt: \"select_account\"\r\n});\r\n\r\n// from firebase/auth:\r\nexport const auth = getAuth();\r\n\r\nexport const signInWithGooglePopup = () => signInWithPopup(auth, provider);\r\nexport const signInWithGoogleRedirect = () => signInWithRedirect(auth, provider);\r\n// Now we need to set things in firebase (in sign-in method in Authentication) => provide hability to sign with Google\r\n\r\nexport const db = getFirestore();\r\n\r\nexport const addCollectionAndDocuments = async (collectionKey, objectstoAdd) => {\r\n    const collectionRef = collection(db, collectionKey);\r\n    const batch = writeBatch(db);\r\n\r\n    objectstoAdd.forEach((object) => {\r\n        const docRef = doc(collectionRef, object.title.toLowerCase());\r\n        batch.set(docRef, object);\r\n    });\r\n    await batch.commit();\r\n    console.log('batch is sent');\r\n};   \r\n\r\nexport const getCategoriesAndDocuments = async () => {\r\n    const collectionRef = collection(db, 'categories');\r\n    const q = query(collectionRef);\r\n\r\n    const querySnapshot = await getDocs(q);\r\n    const categoryMap = querySnapshot.docs.reduce((accumulator, docSnapshot) => {\r\n        const { title, items } = docSnapshot.data();\r\n        accumulator[title.toLowerCase()] = items;\r\n        return accumulator\r\n    }, {});\r\n\r\n    return categoryMap;\r\n}\r\n\r\nexport const createUserDocumentFromAuth = async (userAuth) => {\r\n    const userDocRef = doc(db, 'users', userAuth.uid);\r\n\r\n    const userSnapshot = await getDoc(userDocRef);\r\n\r\n    // I want to check if this data exists\r\n    // if it exist I just return the userDocRef so i do nothing else\r\n    // if not : I create / set the document with the data from userAuth in my collection\r\n    if (!userSnapshot.exists()) {\r\n        // fields inside userAuth object in the browser console: we extract through destructuration these two fields.\r\n        const { displayName, email } = userAuth;\r\n        // to know when the user is sign in : \r\n        const createdAt = new Date();\r\n        // Asynchronously if there is no error we set the document we get before and pass to it the values in 2nd argument\r\n        try {\r\n            await setDoc(userDocRef, { displayName, email, createdAt })\r\n        } catch (error) {\r\n            console.log('error creating the user', error.message);\r\n        }\r\n    }\r\n    return userDocRef;\r\n\r\n}\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}