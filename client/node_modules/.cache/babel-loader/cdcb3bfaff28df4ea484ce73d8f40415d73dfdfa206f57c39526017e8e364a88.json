{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\amaur\\\\Desktop\\\\myWeb\\\\Foodcare\\\\client\\\\src\\\\components\\\\sign-up-form.jsx\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport '../styles/button.scss';\nimport '../styles/form-input.styles.scss';\n\n// Nous créons cet objet qui sera la valeur de départ de useState\n// Nous destructurons l'objet ensuite dans notre composant pour utiliser séparément dans le form ses propriétés.\n// value=\"xxx\" sera ce qui les relit.\n// Nous destructurons pas directement defaultFormFields mais plutôt formFields car il faut passer par useState et c'est formFields qui y reprend le contenu de defaultFormFields.\n\n// Ensuite : on va devoir créer un évènement onChange dans chaque champs du formulaire \n// L'évènement sera handleChange et il faut le rattacher à chaque champ distinct. \n// Pour les distinguer et les rattacher à event (ou e), alors on passe par la name=\"xxx\" \n// Or chaque valeur de name doit correspondre exactement aux propriétés de defaultFormFields.\n// Puis bien sûr le relier à la fonction callback (handleChange) donc demander via destructuration à event de nous donner aussi la valeur.\n\n// Cette fonction handleChange va s'occupper de poser les info aprés le retour dans l'état donc via SetFormFields\n// Nous n'avons besoin de mettre à jour qu'un seul champ, les autres seront dans setFormFields mais sous forme de spread operator.\n// le spread operator permet de prendre toute les valeurs de formFields (donc de defaultFormFields) \n// Puis pour ne prendre qu'une seul de ces valeurs au 1er argument de la fonction SetFormField, nous utilisons [x] pour n'appliquer la fonction que sur x\n// Savoir pourquoi c'est de name dont il s'agit (cad l'event donc le name de chaque input)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst defaultFormFields = {\n  displayName: '',\n  email: '',\n  password: '',\n  confirmPassword: ''\n};\nconst SignUpForm = () => {\n  _s();\n  const [formFields, setFormFields] = useState(defaultFormFields);\n  const {\n    displayName,\n    email,\n    password,\n    confirmPassword\n  } = formFields;\n  const handleChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    setFormFields({\n      ...formFields,\n      [name]: value\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \" S'inscrire avec son email\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"group\",\n      onSubmit: () => {},\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Votre pseudo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"form-input\",\n        type: \"text\",\n        required: true,\n        onChange: handleChange,\n        name: \"displayName\",\n        value: displayName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Votre email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"form-input\",\n        type: \"email\",\n        required: true,\n        onChange: handleChange,\n        name: \"email\",\n        value: email\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Votre mot de passe\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"form-input\",\n        type: \"password\",\n        required: true,\n        onChange: handleChange,\n        name: \"password\",\n        value: password\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Confirmez le mot de passe\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"form-input\",\n        type: \"password\",\n        required: true,\n        onChange: handleChange,\n        name: \"confirmPassword\",\n        value: confirmPassword\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button-container\",\n        type: \"submit\",\n        children: \"S'enregistrer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(SignUpForm, \"BSTP5B8VO6H/Fwu712VTuD9hH54=\");\n_c = SignUpForm;\nexport default SignUpForm;\nvar _c;\n$RefreshReg$(_c, \"SignUpForm\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","Fragment","_Fragment","defaultFormFields","displayName","email","password","confirmPassword","SignUpForm","_s","formFields","setFormFields","handleChange","event","name","value","target","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onSubmit","type","required","onChange","_c","$RefreshReg$"],"sources":["C:/Users/amaur/Desktop/myWeb/Foodcare/client/src/components/sign-up-form.jsx"],"sourcesContent":["import { useState }  from 'react';\r\nimport '../styles/button.scss';\r\nimport '../styles/form-input.styles.scss';\r\n\r\n// Nous créons cet objet qui sera la valeur de départ de useState\r\n// Nous destructurons l'objet ensuite dans notre composant pour utiliser séparément dans le form ses propriétés.\r\n// value=\"xxx\" sera ce qui les relit.\r\n// Nous destructurons pas directement defaultFormFields mais plutôt formFields car il faut passer par useState et c'est formFields qui y reprend le contenu de defaultFormFields.\r\n\r\n// Ensuite : on va devoir créer un évènement onChange dans chaque champs du formulaire \r\n// L'évènement sera handleChange et il faut le rattacher à chaque champ distinct. \r\n// Pour les distinguer et les rattacher à event (ou e), alors on passe par la name=\"xxx\" \r\n// Or chaque valeur de name doit correspondre exactement aux propriétés de defaultFormFields.\r\n// Puis bien sûr le relier à la fonction callback (handleChange) donc demander via destructuration à event de nous donner aussi la valeur.\r\n\r\n// Cette fonction handleChange va s'occupper de poser les info aprés le retour dans l'état donc via SetFormFields\r\n// Nous n'avons besoin de mettre à jour qu'un seul champ, les autres seront dans setFormFields mais sous forme de spread operator.\r\n// le spread operator permet de prendre toute les valeurs de formFields (donc de defaultFormFields) \r\n// Puis pour ne prendre qu'une seul de ces valeurs au 1er argument de la fonction SetFormField, nous utilisons [x] pour n'appliquer la fonction que sur x\r\n// Savoir pourquoi c'est de name dont il s'agit (cad l'event donc le name de chaque input)\r\n\r\nconst defaultFormFields = {\r\n    displayName : '',\r\n    email : '',\r\n    password : '',\r\n    confirmPassword : ''\r\n};\r\n\r\nconst SignUpForm = () => {\r\n    const [formFields, setFormFields] = useState(defaultFormFields)\r\n    const { displayName, email, password, confirmPassword} = formFields;\r\n\r\n    const handleChange = (event) => {\r\n        const {name, value} = event.target; \r\n\r\n        setFormFields({...formFields, [name]:value})\r\n        \r\n    }\r\n\r\n    return(\r\n        <>\r\n            <h1> S'inscrire avec son email</h1>\r\n            <form className=\"group\" onSubmit = {() => {}}>\r\n                <label>Votre pseudo</label>\r\n                <input className='form-input' type='text' required onChange={handleChange} name='displayName' value={displayName}></input>\r\n\r\n                <label>Votre email</label>\r\n                <input className='form-input' type='email' required onChange={handleChange} name='email' value={email}></input>\r\n\r\n                <label>Votre mot de passe</label>\r\n                <input  className='form-input' type='password' required onChange={handleChange} name='password' value={password}></input>\r\n\r\n                <label>Confirmez le mot de passe</label>\r\n                <input className='form-input' type='password' required onChange={handleChange} name='confirmPassword' value={confirmPassword}></input>\r\n                <button className=\"button-container\" type='submit'>S'enregistrer</button>\r\n            </form>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default SignUpForm;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}